Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kwNY-oi4wntv3IOyqeTH_n2i8Zqdl3Ls
"""
# @title installing Libraries
!pip install seaborn
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files
from google.colab import drive
from scipy.stats import chi2_contingency

# @title File Upload 
upload = files.upload()

# @title Upload patient data files
file_path = '64 cases-mine.csv'
data = pd.read_csv(file_path)
#نشان دادن ردیف اول دیتاست
data.head()

# @title Delete rows containing Null values
data_cleaned = data.dropna(how='all')
print(data.describe())
data.info()

# @title number of data with Zero value
print(data['pain'].isnull().sum())
print(data[data['pain'] == 0].shape[0])

# @title Detailed Statistical Analysis
detailed_stats = data.describe(include='all').transpose
print(detailed_stats)

# Total number of Data
total_records = len(data)
print(f"Total Records: {total_records}")

# Checking the number and percentage based on Gender
if 'Gender' in data.columns:
    gender_counts = data['Gender'].value_counts()
    gender_percentages = (gender_counts / total_records) * 100
    print("\nCounts by Gender:")
    print(gender_counts)
    print("\nPercentages by Gender:")
    print(gender_percentages)

# Checking the number and percentage based on Age
if 'Age' in data.columns:
    age_summary = data['Age'].describe()  # خلاصه‌ای از آمار سن
    print("\nAge Summary:")
    print(age_summary)

#بررسی تعداد و درصد بر اساس آکرومیون
if 'acromion' in data.columns:
    acromion_counts = data['acromion'].value_counts()
    acromion_percentages = (acromion_counts / total_records) * 100
    print("\nCounts by Acromion Type:")
    print(acromion_counts)
    print("\nPercentages by Acromion Type:")
    print(acromion_percentages)
    #Checking the number and percentage based on TearSize
if 'TearSize' in data.columns:
    TearSize_counts = data['TearSize'].value_counts()
    TearSize_percentages = (TearSize_counts / total_records) * 100
    print("\nCounts by TearSize:")
    print(TearSize_counts)
    print("\nPercentages by TearSize:")
    print(TearSize_percentages)

# @title General information of patients
# 1.Total number of patients
total_patients = len(data)
print(f"Total Patients: {total_patients}")

# 2. Distribution by Gender
if 'Gender' in data.columns:
    gender_counts = data['Gender'].value_counts()
    gender_percentages = (gender_counts / total_patients) * 100
    print("\nGender Distribution:")
    print(gender_counts)
    print("\nGender Percentages:")
    print(gender_percentages)

# 3. Age Distribution
if 'Age' in data.columns:
    age_summary = data['Age'].describe()
    print("\nAge Distribution:")
    print(age_summary)

# 4. Distribution by Acromion type
if 'acromion' in data.columns:
    acromion_counts = data['acromion'].value_counts()
    acromion_percentages = (acromion_counts / total_patients) * 100
    print("\nAcromion Type Distribution:")
    print(acromion_counts)
    print("\nAcromion Type Percentages:")
    print(acromion_percentages)

# 5. tear area & Pain
if 'area2' in data.columns and 'pain' in data.columns:
    area_summary = data['area2'].describe()
    pain_summary = data['pain'].describe()
    print("\nTear Area (area2) Distribution:")
    print(area_summary)
    print("\nPain Distribution:")
    print(pain_summary)
# Distribution by power
if 'power' in data.columns:
    power_counts = data['power'].value_counts()
    power_percentages = (power_counts / total_patients) * 100
    print("\nPower Type Distribution:")
    print(power_counts)
    print("\nPower Type Percentages:")
    print(power_percentages)

#Average Pain Calculation for each Acromion type
mean_pain_per_group = data.groupby("acromion")["pain"].mean()
print("Average Pain for each Acromion type:")
print(mean_pain_per_group)

#Calculation the average tear area for each acromion type
mean_pain_per_group = data.groupby("acromion")["area2"].mean()
print("average tear area for each acromion type:")
print(mean_pain_per_group)

#Calculation of average pain for each TearSize
mean_pain_per_group = data.groupby("TearSize")["pain"].mean()
print("average pain for each TearSize:")
print(mean_pain_per_group)

# @title Correlation between Area2 and Pain
# Pearson Correlation
correlation = data[['area2', 'pain']].corr().iloc[0, 1]
print(f"Correlation between Area2 and Pain(Pearson): {correlation:.2f}")

# Spearman correlation
correlation = data[['area2', 'pain']].corr(method='spearman').iloc[0, 1]
print(f"Correlation between Area2 and Pain(Spearman): {correlation:.2f}")

# Kendall correlation
correlation = data[['area2', 'pain']].corr(method='kendall').iloc[0, 1]
print(f"Correlation between Area2 and Pain(Kendall): {correlation:.2f}")

# @title kruskal-Wallis Test
#Acromion type vs pain
from scipy.stats import kruskal
groups = [group['pain'].dropna() for _, group in data.groupby('acromion')]
kruskal_result = kruskal(*groups)
print("kruskal-Wallis Test Result(pain-acromion):")
print(f"H-statistic: {kruskal_result.statistic}")
print(f"p-value: {kruskal_result.pvalue}")

#Acromion type vs area2
from scipy.stats import kruskal
groups = [group['area2'].dropna() for _, group in data.groupby('acromion')]
kruskal_result = kruskal(*groups)
print("kruskal-Wallis Test Result(area2-acromion):")
print(f"H-statistic: {kruskal_result.statistic}")
print(f"p-value: {kruskal_result.pvalue}")

#pain with TearSize
from scipy.stats import kruskal
groups = [group['pain'].dropna() for _, group in data.groupby('TearSize')]
kruskal_result = kruskal(*groups)
print("kruskal-Wallis Test Result(pain-TearSize):")
print(f"H-statistic: {kruskal_result.statistic}")
print(f"p-value: {kruskal_result.pvalue}")

# @title  Chi-Square Test Statistic(acromion-TearSize)
from scipy.stats import chi2_contingency
import numpy as np
# Creat an agreement table
contingency_table = pd.crosstab(data['acromion'], data['TearSize'])
print(contingency_table)

#  Ci2-test for Determining the relathionship between Acromion & TearSize
chi2, p, dof, expected = chi2_contingency(contingency_table)
print("Chi-Square Test Statistic(acromion-TearSize):", chi2)
print("P-Value:", p)
print("Degrees of Freedom:", dof)
print("Expected Frequencies Table:")
print(expected)

# Calculate Cramer-v
n = contingency_table.sum().sum()
cramers_v = np.sqrt(chi2 / (n * (min(contingency_table.shape) - 1)))
print("Cramér’s V:", cramers_v)

# Draw Heatmap
sns.heatmap(contingency_table, annot=True, cmap="YlGnBu", fmt='d')
plt.title('Contingency Table Heatmap')
plt.xlabel('Tear Size')
plt.ylabel('Acromion Type')
plt.show()

# @title Platte
# Cheking the existence of Data
if 'area2' in data.columns and 'pain' in data.columns:
    # Deletion for Null data
    data_clean = data[['area2', 'pain']].dropna()

    # Draw a Scatter Diagram (Scatter Plot)
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=data_clean, x='area2', y='pain', alpha=0.7, color='blue')
    plt.title(f"Scatter Plot: Area2 vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("Area2")
    plt.ylabel("Pain")
    plt.show()

    # Draw a regression line diagram
    plt.figure(figsize=(10, 6))
    sns.regplot(data=data_clean, x='area2', y='pain', scatter_kws={'alpha':0.7}, line_kws={"color":"red"})
    plt.title(f"Regression Plot: Area vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("Area2")
    plt.ylabel("Pain")
    plt.show()
else:
    print("The required columns ('area2', 'pain') are not available in the dataset.")

# Cheking the existence of Data
if 'acromion' in data.columns and 'pain' in data.columns:
    # Deletion fo Null
    data_clean = data[['acromion', 'pain']].dropna()

    # Draw a Scatter Diagram (Scatter Plot)
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=data_clean, x='acromion', y='pain', alpha=0.7, color='blue')
    plt.title(f"Scatter Plot: acromion vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("acromion ")
    plt.ylabel("Pain")
    plt.show()

    # Draw a regression line diagram
    plt.figure(figsize=(10, 6))
    sns.regplot(data=data_clean, x='acromion', y='pain', scatter_kws={'alpha':0.7}, line_kws={"color":"red"})
    plt.title(f"Regression Plot: acromion vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("acromion")
    plt.ylabel("Pain")
    plt.show()
else:
    print("The required columns ('acromion', 'pain') are not available in the dataset.")

#Box-plot for Acromion vs pain
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='acromion', y='pain', palette='coolwarm')
plt.title(" Box Plot: Pain by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Pain")
plt.show()

#Box-plot for acromion & Area2
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='acromion', y='area2', palette='coolwarm')
plt.title(" Box Plot: Area by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Area")
plt.show()

#Bar-chart for Acromino & pain
plt.figure(figsize=(10, 6))
sns.barplot(data=data, x='acromion', y='pain', palette='viridis')
plt.title(" Bar Plot: Pain by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Pain")
plt.show()

#Dot-plot for acromion & pain
plt.figure(figsize=(10, 6))
sns.stripplot(data=data, x='acromion', y='pain', palette='viridis')
plt.title(" Scatter Plot: Pain by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Pain")
plt.show()

# Distributin Diagrams
variables = ["rotation.internal", "rotation.external", "flexion", "extension", "abduction"]  # نام ستون‌ها در داده‌ها

for variable in variables:
    plt.figure(figsize=(8, 6))
    sns.histplot(data[variable], kde=True, bins=30, color='blue')
    plt.title(f'Distribution of {variable}')
    plt.xlabel(variable)
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()

# @title Age
from matplotlib import pyplot as plt
data['Age'].plot(kind='hist', bins=20, title='Age')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Gender
from matplotlib import pyplot as plt
data['Gender'].plot(kind='hist', bins=20, title='Gender')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title pain vs Age
from matplotlib import pyplot as plt
data.plot(kind='scatter', x='pain', y='Age', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title pain vs Gender
from matplotlib import pyplot as plt
data.plot(kind='scatter', x='pain', y='Gender', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)
