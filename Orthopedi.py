# -*- coding: utf-8 -*-
"""پایان نامه.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kwNY-oi4wntv3IOyqeTH_n2i8Zqdl3Ls
"""

# @title خواندن فایل از گوگل درایو
from google.colab import drive
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/لیست بیماران ارتوپدی پایان نامه-تکمیل شده-CSV.csv'
df = pd.read_csv(file_path)
data.head()

# @title نصب کتابخانه ها
!pip install seaborn
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files
from google.colab import drive
from scipy.stats import chi2_contingency

# @title آپلود فایل
upload = files.upload()

# @title بارگزاری فایل دیتای بیماران
file_path = '64 cases-mine.csv'
data = pd.read_csv(file_path)
#نشان دادن ردیف اول دیتاست
data.head()

# @title حذف ردیف های شامل مقادیر Null
data_cleaned = data.dropna(how='all')
print(data.describe())
data.info()

# @title تعداد داده های با مقدار صفر
print(data['pain'].isnull().sum())
print(data[data['pain'] == 0].shape[0])

# @title آنالیز آماری با جزییات
detailed_stats = data.describe(include='all').transpose
print(detailed_stats)

# تعداد کل داده‌ها
total_records = len(data)
print(f"Total Records: {total_records}")

# بررسی تعداد و درصد بر اساس جنسیت
if 'Gender' in data.columns:
    gender_counts = data['Gender'].value_counts()
    gender_percentages = (gender_counts / total_records) * 100
    print("\nCounts by Gender:")
    print(gender_counts)
    print("\nPercentages by Gender:")
    print(gender_percentages)

# بررسی تعداد و درصد بر اساس سن
if 'Age' in data.columns:
    age_summary = data['Age'].describe()  # خلاصه‌ای از آمار سن
    print("\nAge Summary:")
    print(age_summary)

#بررسی تعداد و درصد بر اساس آکرومیون
if 'acromion' in data.columns:
    acromion_counts = data['acromion'].value_counts()
    acromion_percentages = (acromion_counts / total_records) * 100
    print("\nCounts by Acromion Type:")
    print(acromion_counts)
    print("\nPercentages by Acromion Type:")
    print(acromion_percentages)
    #بررسی تعداد و درصد بر اساس آکرومیون
if 'TearSize' in data.columns:
    TearSize_counts = data['TearSize'].value_counts()
    TearSize_percentages = (TearSize_counts / total_records) * 100
    print("\nCounts by TearSize:")
    print(TearSize_counts)
    print("\nPercentages by TearSize:")
    print(TearSize_percentages)

# @title فصل 4 - اطلاعات کلی بیماران
# 1. تعداد کل بیماران
total_patients = len(data)
print(f"Total Patients: {total_patients}")

# 2. توزیع بر اساس جنسیت
if 'Gender' in data.columns:
    gender_counts = data['Gender'].value_counts()
    gender_percentages = (gender_counts / total_patients) * 100
    print("\nGender Distribution:")
    print(gender_counts)
    print("\nGender Percentages:")
    print(gender_percentages)

# 3. توزیع سنی
if 'Age' in data.columns:
    age_summary = data['Age'].describe()
    print("\nAge Distribution:")
    print(age_summary)

# 4. توزیع بر اساس نوع آکرومیون
if 'acromion' in data.columns:
    acromion_counts = data['acromion'].value_counts()
    acromion_percentages = (acromion_counts / total_patients) * 100
    print("\nAcromion Type Distribution:")
    print(acromion_counts)
    print("\nAcromion Type Percentages:")
    print(acromion_percentages)

# 5. شدت پارگی و درد
if 'area2' in data.columns and 'pain' in data.columns:
    area_summary = data['area2'].describe()
    pain_summary = data['pain'].describe()
    print("\nTear Area (area2) Distribution:")
    print(area_summary)
    print("\nPain Distribution:")
    print(pain_summary)
# 6آکرومیو. توزیع بر اساس نوع power
if 'power' in data.columns:
    power_counts = data['power'].value_counts()
    power_percentages = (power_counts / total_patients) * 100
    print("\nPower Type Distribution:")
    print(power_counts)
    print("\nPower Type Percentages:")
    print(power_percentages)

#محاسبه میانگین درد برای هر گروه آکرامیون
mean_pain_per_group = data.groupby("acromion")["pain"].mean()

#نمایش نتایج
print("میانگین درد برای هر گروه آکرامیون:")
print(mean_pain_per_group)

#محاسبه میانگین مساحت پارگی برای هر گروه آکرامیون
mean_pain_per_group = data.groupby("acromion")["area2"].mean()

#نمایش نتایج
print("میانگین مساحت پارگی برای هر گروه آکرامیون:")
print(mean_pain_per_group)

#محاسبه میانگین درد برای هر گروه پارگی
mean_pain_per_group = data.groupby("TearSize")["pain"].mean()

#نمایش نتایج
print("میانگین درد برای هر گروه پارگی:")
print(mean_pain_per_group)

# @title Correlation between Area2 and Pain
# محاسبه همبستگی بین مساحت پارگی و میزان درد
# Pearson Correlation
correlation = data[['area2', 'pain']].corr().iloc[0, 1]
print(f"Correlation between Area2 and Pain(Pearson): {correlation:.2f}")

# Spearman correlation
correlation = data[['area2', 'pain']].corr(method='spearman').iloc[0, 1]
print(f"Correlation between Area2 and Pain(Spearman): {correlation:.2f}")

# Kendall correlation
correlation = data[['area2', 'pain']].corr(method='kendall').iloc[0, 1]
print(f"Correlation between Area2 and Pain(Kendall): {correlation:.2f}")

# @title kruskal-Wallis Test
#آزمون کروسکال والیس برای تعیین ارتباط بین تایپ آکرومیون و میزان بهبودی()
from scipy.stats import kruskal
groups = [group['pain'].dropna() for _, group in data.groupby('acromion')]
kruskal_result = kruskal(*groups)
print("kruskal-Wallis Test Result(pain-acromion):")
print(f"H-statistic: {kruskal_result.statistic}")
print(f"p-value: {kruskal_result.pvalue}")

#آزمون کروسکال والیس برای تعیین ارتباط بین تایپ آکرومیون و شدت پارگی()
from scipy.stats import kruskal
groups = [group['area2'].dropna() for _, group in data.groupby('acromion')]
kruskal_result = kruskal(*groups)
print("kruskal-Wallis Test Result(area2-acromion):")
print(f"H-statistic: {kruskal_result.statistic}")
print(f"p-value: {kruskal_result.pvalue}")

#آزمون کروسکال والیس برای تعیین ارتباط بین بهبودی و شدت پارگی()
from scipy.stats import kruskal
groups = [group['pain'].dropna() for _, group in data.groupby('TearSize')]
kruskal_result = kruskal(*groups)
print("kruskal-Wallis Test Result(pain-TearSize):")
print(f"H-statistic: {kruskal_result.statistic}")
print(f"p-value: {kruskal_result.pvalue}")

# @title  Chi-Square Test Statistic(acromion-TearSize)
from scipy.stats import chi2_contingency
import numpy as np
# ایجاد جدول توافقی
contingency_table = pd.crosstab(data['acromion'], data['TearSize'])

# نمایش جدول
print(contingency_table)

#  اجرای آزمون خی دو برای تعیین ارتباط بین اکرومیون و اندازه پارگی
chi2, p, dof, expected = chi2_contingency(contingency_table)

# نمایش نتایج
print("Chi-Square Test Statistic(acromion-TearSize):", chi2)
print("P-Value:", p)
print("Degrees of Freedom:", dof)
print("Expected Frequencies Table:")
print(expected)


# محاسبه کرامر V
n = contingency_table.sum().sum()  # مجموع کل نمونه‌ها
cramers_v = np.sqrt(chi2 / (n * (min(contingency_table.shape) - 1)))

print("Cramér’s V:", cramers_v)

# رسم Heatmap
sns.heatmap(contingency_table, annot=True, cmap="YlGnBu", fmt='d')
plt.title('Contingency Table Heatmap')
plt.xlabel('Tear Size')
plt.ylabel('Acromion Type')
plt.show()

# @title Platte
# بررسی اینکه ستون‌های مورد نظر در داده وجود دارند
if 'area2' in data.columns and 'pain' in data.columns:
    # حذف مقادیر Null
    data_clean = data[['area2', 'pain']].dropna()

    # رسم نمودار پراکندگی (Scatter Plot)
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=data_clean, x='area2', y='pain', alpha=0.7, color='blue')
    plt.title(f"Scatter Plot: Area2 vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("Area2")
    plt.ylabel("Pain")
    plt.show()

    # رسم نمودار خط رگرسیون
    plt.figure(figsize=(10, 6))
    sns.regplot(data=data_clean, x='area2', y='pain', scatter_kws={'alpha':0.7}, line_kws={"color":"red"})
    plt.title(f"Regression Plot: Area vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("Area2")
    plt.ylabel("Pain")
    plt.show()
else:
    print("The required columns ('area2', 'pain') are not available in the dataset.")

# بررسی اینکه ستون‌های مورد نظر در داده وجود دارند
if 'acromion' in data.columns and 'pain' in data.columns:
    # حذف مقادیر Null
    data_clean = data[['acromion', 'pain']].dropna()

    # رسم نمودار پراکندگی (Scatter Plot)
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=data_clean, x='acromion', y='pain', alpha=0.7, color='blue')
    plt.title(f"Scatter Plot: acromion vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("acromion ")
    plt.ylabel("Pain")
    plt.show()

    # رسم نمودار خط رگرسیون
    plt.figure(figsize=(10, 6))
    sns.regplot(data=data_clean, x='acromion', y='pain', scatter_kws={'alpha':0.7}, line_kws={"color":"red"})
    plt.title(f"Regression Plot: acromion vs Pain (Correlation = {correlation:.2f})")
    plt.xlabel("acromion")
    plt.ylabel("Pain")
    plt.show()
else:
    print("The required columns ('acromion', 'pain') are not available in the dataset.")

#نمودار جعبه ای برای pain براساس acromion
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='acromion', y='pain', palette='coolwarm')
plt.title(" Box Plot: Pain by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Pain")
plt.show()

#نمودار جعبه ای برای area براساس acromion
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='acromion', y='area2', palette='coolwarm')
plt.title(" Box Plot: Area by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Area")
plt.show()

#نمودار میله ای برای pain براساس acromion
plt.figure(figsize=(10, 6))
sns.barplot(data=data, x='acromion', y='pain', palette='viridis')
plt.title(" Bar Plot: Pain by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Pain")
plt.show()

#نمودار نقطه ای برای pain براساس acromion
plt.figure(figsize=(10, 6))
sns.stripplot(data=data, x='acromion', y='pain', palette='viridis')
plt.title(" Scatter Plot: Pain by Acromion Type")
plt.xlabel("Acromion Type")
plt.ylabel("Pain")
plt.show()

# ترسیم نمودارهای توزیع برای متغیرهای مختلف
variables = ["rotation.internal", "rotation.external", "flexion", "extension", "abduction"]  # نام ستون‌ها در داده‌ها

for variable in variables:
    plt.figure(figsize=(8, 6))
    sns.histplot(data[variable], kde=True, bins=30, color='blue')
    plt.title(f'Distribution of {variable}')
    plt.xlabel(variable)
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()

# @title Age

from matplotlib import pyplot as plt
data['Age'].plot(kind='hist', bins=20, title='Age')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Gender

from matplotlib import pyplot as plt
data['Gender'].plot(kind='hist', bins=20, title='Gender')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title pain vs Age

from matplotlib import pyplot as plt
data.plot(kind='scatter', x='pain', y='Age', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title pain vs Gender

from matplotlib import pyplot as plt
data.plot(kind='scatter', x='pain', y='Gender', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)